{"version":3,"sources":["firebase.js","Auth.js","Login.js","PrivateRoute.js","EditableTextField.js","MainPage.js","api.js","AppHeader.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","AuthContext","React","createContext","AuthProvider","children","useState","currentUser","setCurrentUser","pending","setPending","useEffect","app","auth","onAuthStateChanged","user","Provider","value","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","form","width","submit","margin","withRouter","history","classes","handleLogin","useCallback","event","a","preventDefault","target","elements","email","password","signInWithEmailAndPassword","push","alert","useContext","to","Container","component","maxWidth","CssBaseline","className","noValidate","onSubmit","TextField","variant","required","fullWidth","id","label","name","autoComplete","autoFocus","type","Button","color","PrivateRoute","RouteComponent","rest","render","routeProps","EditableTextField","index","updateItemTitle","newValue","setNewValue","editMode","setEditMode","input","height","border","opacity","borderBottom","showAsText","showAsInputField","inputElement","useRef","current","focus","style","cursor","onClick","onBlur","onKeyDown","key","ref","defaultValue","onChange","root","listStyleType","justifyContent","pcb","card","minWidth","marginLeft","marginBottom","padding","flex","inputfield","MainPage","newItemTitle","setNewItemTitle","items","setItems","waitForApi","setWaitForApi","allChangesSaved","setAllChangesSaved","userId","firestore","collection","doc","get","then","data","tasks","catch","error","console","log","finally","set","Card","e","newItem","uuidv4","InputBase","placeholder","currentTarget","onDrop","removedIndex","addedIndex","arrayMove","dragHandleSelector","lockAxis","dropPlaceholder","animationDuration","showOnTop","map","itemTitle","ListItem","ListItemSecondaryAction","ListItemIcon","IconButton","splice","deleteItem","Divider","backgroundColor","palette","primary","title","flexGrow","userName","AppHeader","AppBar","position","Toolbar","Typography","signOut","createMuiTheme","main","secondary","App","ThemeProvider","exact","path","Login","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3c509a42.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBlc-9cBQVLLXdLxYfVpgh8I3iFALoQ7E0\",\n    authDomain: \"todo-2ac34.firebaseapp.com\",\n    databaseURL: \"https://todo-2ac34.firebaseio.com\",\n    projectId: \"todo-2ac34\",\n    storageBucket: \"todo-2ac34.appspot.com\",\n    messagingSenderId: \"144767486267\",\n    appId: \"1:144767486267:web:53c6a77d36c83e42db4f1e\",\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React, {useEffect, useState} from \"react\";\nimport app from \"./firebase.js\";\n\nexport const AuthContext = React.createContext();\n\nexport const AuthProvider = ({children}) => {\n    const [currentUser, setCurrentUser] = useState(null);\n    const [pending, setPending] = useState(true);\n\n    useEffect(() => {\n        if (process.env.REACT_APP_USE_MOCK===\"true\") {\n            setCurrentUser({email: \"MOCKUSER\"})\n            setPending(false)\n        } else {\n            app.auth().onAuthStateChanged((user) => {\n                setCurrentUser(user)\n                setPending(false)\n            });\n        }\n    }, []);\n\n    if (pending) {\n        return <>Loading...</>\n    }\n\n    return (\n        <AuthContext.Provider\n            value={{\n                currentUser\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};","import React, {useCallback, useContext} from \"react\";\nimport {Redirect, withRouter} from \"react-router\";\nimport app from \"./firebase.js\";\nimport {AuthContext} from \"./Auth.js\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\nconst Login = ({history}) => {\n    const classes = useStyles();\n\n    const handleLogin = useCallback(\n        async event => {\n            event.preventDefault();\n            const {email, password} = event.target.elements;\n            try {\n                await app\n                    .auth()\n                    .signInWithEmailAndPassword(email.value, password.value);\n                history.push(\"/\");\n            } catch (error) {\n                alert(error);\n            }\n        },\n        [history]\n    );\n\n    const {currentUser} = useContext(AuthContext);\n\n    if (currentUser) {\n        return <Redirect to=\"/\"/>;\n    }\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline/>\n            <div className={classes.paper}>\n                <form className={classes.form} noValidate onSubmit={handleLogin}>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"email\"\n                        label=\"Email Address\"\n                        name=\"email\"\n                        autoComplete=\"email\"\n                        autoFocus\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        name=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        id=\"password\"\n                        autoComplete=\"current-password\"\n                    />\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        className={classes.submit}\n                        color=\"primary\"\n                    >\n                        Sign In\n                    </Button>\n                </form>\n            </div>\n\n        </Container>\n    );\n};\n\nexport default withRouter(Login);","import React, {useContext} from \"react\";\nimport {Route, Redirect} from \"react-router-dom\";\nimport {AuthContext} from \"./Auth\";\n\nconst PrivateRoute = ({component: RouteComponent, ...rest}) => {\n    const {currentUser} = useContext(AuthContext);\n    return (\n        <Route\n            {...rest}\n            render={routeProps =>\n                !!currentUser ? (\n                    <RouteComponent {...routeProps} />\n                ) : (\n                    <Redirect to={\"/login\"}/>\n                )\n            }\n        />\n    );\n};\n\n\nexport default PrivateRoute","import React, {useEffect, useRef, useState} from \"react\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\n\n\n\n\nconst EditableTextField = ({value, index, updateItemTitle}) => {\n\n    const [newValue, setNewValue] = useState(value);\n    const [editMode, setEditMode] = useState(false);\n\n    const useStyles = makeStyles({\n        input: {\n            height:\"50px\",\n            border:0,\n            opacity: 1,\n            borderBottom: 0,\n            \"&:before\": {\n                borderBottom: 0\n            }\n        },\n        showAsText: {\n            display: editMode\n                ? \"none\"\n                : \"\",\n        },\n        showAsInputField: {\n            display: editMode\n                ? \"\"\n                : \"none\",\n        }\n    });\n\n    const classes = useStyles();\n    const inputElement = useRef(null);\n\n    const onButtonClick = () => {\n        setEditMode(true);\n    };\n\n    useEffect(() => {\n        inputElement.current.focus();\n    }, [editMode])\n\n    const handleChange = (event) => {\n        setNewValue(event.target.value);\n    };\n\n    const handleBlur = () => {\n        setEditMode(false);\n        updateItemTitle(newValue,index);\n    };\n\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            setEditMode(false);\n            updateItemTitle(newValue,index);\n        }\n    }\n\n    return (\n        <>\n            <span\n                style={{width:\"80%\", cursor:\"pointer\"}}\n                className={classes.showAsText}\n                onClick={onButtonClick}>\n                {newValue}\n            </span>\n            <input\n                style={{width:\"80%\"}}\n                onBlur={handleBlur}\n                onKeyDown={handleKeyDown}\n                className={classes.showAsInputField}\n                ref={inputElement}\n                defaultValue={newValue}\n                onChange={handleChange}\n                type=\"text\"/>\n        </>\n    );\n\n}\n\nexport default EditableTextField;\n","import React, {useContext, useEffect, useState} from \"react\";\nimport {AuthContext} from \"./Auth\";\nimport {getTodoForUser, setTodoForUser} from \"./api\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport {Container, Draggable} from \"react-smooth-dnd\";\nimport arrayMove from \"array-move\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport DragHandleIcon from \"@material-ui/icons/DragHandle\";\nimport {Divider} from \"@material-ui/core\";\nimport {v4 as uuidv4} from 'uuid';\nimport EditableTextField from \"./EditableTextField\";\nimport Card from \"@material-ui/core/Card\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: theme.spacing(1),\n        listStyleType: 'none', //hack!!\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    pcb : {\n        color:\"red\",\n    },\n    card: {\n        width: \"800px\",\n        minWidth: \"300px\"\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        padding: theme.spacing(1),\n        flex: 1,\n    },\n    inputfield: {},\n}));\n\n\nconst MainPage = () => {\n    const [newItemTitle, setNewItemTitle] = useState(\"\");\n    const [items, setItems] = useState([]);\n    const [waitForApi, setWaitForApi] = useState(false);\n    const {currentUser} = useContext(AuthContext);\n    const [allChangesSaved, setAllChangesSaved] = useState(true);\n    const classes = useStyles();\n\n    //Trigger (get list) on logged in user\n    useEffect(() => {\n        setWaitForApi(true);\n        getTodoForUser(currentUser.email)\n            .then((items) => {\n                setItems(items);\n            })\n            .catch((error) => {\n                console.log(\"Failed to load todo-list\", error)\n            })\n            .finally(() => {\n                setWaitForApi(false);\n            });\n    }, [currentUser.email]);\n\n    //Trigger (save list) on list change\n    useEffect(() => {\n        if (!allChangesSaved) {\n            console.log(\"SAVING\", items);\n            setTodoForUser(currentUser.email, items);\n            setAllChangesSaved(true);\n        }\n    }, [items, allChangesSaved, currentUser.email]);\n\n    const addItem = (e) => {\n        e.preventDefault();\n        let newItem = {\n            \"itemTitle\": newItemTitle,\n            \"id\": uuidv4(),\n            \"favorite\": false,\n            \"done\": false,\n        };\n        setItems([...items, newItem]);\n        setNewItemTitle(\"\");\n        setAllChangesSaved(false);\n    };\n\n    const deleteItem = (index, e) => {\n        e.preventDefault();\n        items.splice(index, 1)\n        //setItems(items.slice());\n        setItems([...items]); //TODO: forstå denne\n        setAllChangesSaved(false);\n    }\n\n    const onDrop = ({removedIndex, addedIndex}) => {\n        setItems(items => arrayMove(items, removedIndex, addedIndex));\n        setAllChangesSaved(false);\n    };\n\n    const updateItemTitle = (value, index) => {\n        console.log(index);\n        items[index].itemTitle = value;\n        console.log(items);\n        setItems([...items])\n        setAllChangesSaved(false);\n    };\n\n    return (\n        <div className={classes.root}>\n            <Card className={classes.card}>\n                <form onSubmit={addItem}>\n                    <InputBase className={classes.input}\n                               variant=\"standard\"\n                               fullWidth\n                               placeholder=\"Legg til en oppgave\"\n                               value={newItemTitle}\n                               onChange={(e) => setNewItemTitle(e.currentTarget.value)}\n                    />\n                </form>\n                <Container onDrop={onDrop} dragHandleSelector=\".drag-handle\" lockAxis=\"y\" dropPlaceholder={{\n                    animationDuration: 150,\n                    showOnTop: true,\n                    className: 'cards-drop-preview'\n                }}>\n                    {items && items.map(({id, itemTitle}, index) => {\n                        return (\n                            <Draggable key={id}>\n                                <ListItem>\n                                    {/*<ListItemText id={id} primary={itemTitle}/>*/}\n                                    <EditableTextField   value={itemTitle} index={index}\n                                                       updateItemTitle={(value, index) => updateItemTitle(value, index)}/>\n                                    <ListItemSecondaryAction>\n                                        <ListItemIcon >\n                                            <IconButton onClick={(e) => deleteItem(index, e)}>\n                                                <DeleteIcon/>\n                                            </IconButton>\n                                        </ListItemIcon>\n                                        {/*<ListItemIcon>\n                                        <Checkbox icon={<FavoriteBorder/>} checkedIcon={<Favorite/>} onClick={(e) => setFavorite(id, e)} name=\"checked\"/>\n                                    </ListItemIcon>*/}\n                                        <ListItemIcon style={{minWidth:\"0\"}} className=\"drag-handle\">\n                                            <DragHandleIcon/>\n                                        </ListItemIcon>\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                                <Divider/>\n                            </Draggable>\n                        );\n                    })}\n                </Container>\n                {waitForApi && (<pre>fetching data ...</pre>)}\n            </Card>\n        </div>\n    );\n}\n\nexport default MainPage;\n","import firebase from \"./firebase\";\nimport \"firebase/firestore\";\n\nconst collectionName = \"todoLists\";\n\nexport const getTodoForUser = (userId) => {\n    if (process.env.REACT_APP_USE_MOCK===\"true\") {\n        return new Promise((resolve, reject) => {\n            let MOCK_DATA = [\n                {id:\"1\",itemTitle: \"TODO-item 1\"},\n                {id:\"2\",itemTitle: \"TODO-item 2\"},\n                {id:\"3\",itemTitle: \"TODO-item 3\"},\n                {id:\"4\",itemTitle: \"TODO-item 4\"},\n            ];\n            console.log(\"Mock retrieving list\")\n            resolve(MOCK_DATA);\n        });\n    }\n    return firebase\n        .firestore()\n        .collection(collectionName)\n        .doc(userId)\n        .get()\n        .then((doc) => {\n            return doc.data().tasks;\n        });\n};\n\n\nexport const setTodoForUser = (userId, tasks) => {\n    if (process.env.REACT_APP_USE_MOCK===\"true\") {\n        console.log(\"Mock saving list\")\n        return;\n    }\n    return firebase\n        .firestore()\n        .collection(collectionName)\n        .doc(userId)\n        .set({tasks: tasks})\n        .then(() => {\n            console.log(\"Document successfully written!\");\n        })\n        .catch((error) => {\n            console.error(\"Error updating/creating document: \", error);\n        });\n};\n\n\n","import React, {useContext} from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport {AuthContext} from \"./Auth\";\nimport app from \"./firebase\";\n\nconst useStyles = makeStyles((theme) => ({\n    // menuButton: {\n    //     marginRight: theme.spacing(2),\n    // },\n    root: {\n        backgroundColor: theme.palette.primary\n    },\n    title: {\n        flexGrow: 1,\n    },\n    userName: {\n        flexGrow: 1,\n    },\n}));\n\nconst AppHeader = () => {\n    const classes = useStyles();\n    const {currentUser} = useContext(AuthContext);\n\n    return (\n        <AppBar position=\"static\" className={classes.root}>\n            <Toolbar>\n                {/*<IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">*/}\n                {/*    <MenuIcon/>*/}\n                {/*</IconButton>*/}\n                {/*<Typography variant=\"h6\" className={classes.title}>*/}\n                {/*    ONKEL PERS TODO APP*/}\n                {/*</Typography>*/}\n                {!currentUser && <Button color=\"inherit\">Login</Button>}\n                {!!currentUser && <>\n                    <Typography className={classes.userName} variant=\"h6\">{currentUser.email} </Typography>\n                    <Button color=\"inherit\" onClick={() => app.auth().signOut()}>Sign out</Button>\n                    </>\n                }\n            </Toolbar>\n        </AppBar>\n    );\n}\n\nexport default AppHeader;\n","import React from \"react\";\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport Login from \"./Login\";\nimport {AuthProvider} from \"./Auth\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport MainPage from \"./MainPage\";\nimport AppHeader from \"./AppHeader\";\nimport {createMuiTheme} from '@material-ui/core/styles';\nimport {ThemeProvider} from \"@material-ui/styles\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: \"#494D5F\",\n        },\n        secondary: {\n            main: \"#8458B3\",\n        },\n    },\n});\n\nconst App = () => {\n    return (\n        <ThemeProvider theme={theme}>\n            <AuthProvider>\n                <AppHeader/>\n                <Router>\n                    <PrivateRoute exact path=\"/\" component={MainPage}/>\n                    <Route exact path=\"/login\" component={Login}/>\n                </Router>\n            </AuthProvider>\n        </ThemeProvider>\n    );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}