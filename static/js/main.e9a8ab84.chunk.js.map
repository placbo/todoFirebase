{"version":3,"sources":["firebase.js","Auth.js","Login.js","PrivateRoute.js","MainPage.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","AuthContext","React","createContext","AuthProvider","children","useState","currentUser","setCurrentUser","pending","setPending","useEffect","app","auth","onAuthStateChanged","user","Provider","value","withRouter","history","handleLogin","useCallback","event","a","preventDefault","target","elements","email","password","signInWithEmailAndPassword","push","alert","useContext","to","onSubmit","name","type","placeholder","PrivateRoute","RouteComponent","component","rest","render","routeProps","MainPage","itemTitle","setItemTitle","items","setItems","className","size","e","pcb","onChange","currentTarget","map","item","index","key","onClick","signOut","App","exact","path","Login","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e9a8ab84.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBlc-9cBQVLLXdLxYfVpgh8I3iFALoQ7E0\",\n    authDomain: \"todo-2ac34.firebaseapp.com\",\n    databaseURL: \"https://todo-2ac34.firebaseio.com\",\n    projectId: \"todo-2ac34\",\n    storageBucket: \"todo-2ac34.appspot.com\",\n    messagingSenderId: \"144767486267\",\n    appId: \"1:144767486267:web:53c6a77d36c83e42db4f1e\",\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React, {useEffect, useState} from \"react\";\nimport app from \"./firebase.js\";\n\nexport const AuthContext = React.createContext();\n\nexport const AuthProvider = ({children}) => {\n    const [currentUser, setCurrentUser] = useState(null);\n    const [pending, setPending] = useState(true);\n\n    useEffect(() => {\n        app.auth().onAuthStateChanged((user) => {\n            setCurrentUser(user)\n            setPending(false)\n        });\n    }, []);\n\n    if (pending) {\n        return <>Loading...</>\n    }\n\n    return (\n        <AuthContext.Provider\n            value={{\n                currentUser\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};","import React, {useCallback, useContext} from \"react\";\nimport {withRouter, Redirect} from \"react-router\";\nimport app from \"./firebase.js\";\nimport {AuthContext} from \"./Auth.js\";\n\nconst Login = ({history}) => {\n    const handleLogin = useCallback(\n        async event => {\n            event.preventDefault();\n            const {email, password} = event.target.elements;\n            try {\n                await app\n                    .auth()\n                    .signInWithEmailAndPassword(email.value, password.value);\n                history.push(\"/\");\n            } catch (error) {\n                alert(error);\n            }\n        },\n        [history]\n    );\n\n    const {currentUser} = useContext(AuthContext);\n\n    if (currentUser) {\n        return <Redirect to=\"/\"/>;\n    }\n\n    return (\n        <div>\n            <h1>Log in</h1>\n            <form onSubmit={handleLogin}>\n                <label>\n                    Email\n                    <input name=\"email\" type=\"email\" placeholder=\"Email\"/>\n                </label>\n                <label>\n                    Password\n                    <input name=\"password\" type=\"password\" placeholder=\"Password\"/>\n                </label>\n                <button type=\"submit\">Log in</button>\n            </form>\n        </div>\n    );\n};\n\nexport default withRouter(Login);","import React, {useContext} from \"react\";\nimport {Route, Redirect} from \"react-router-dom\";\nimport {AuthContext} from \"./Auth\";\n\nconst PrivateRoute = ({component: RouteComponent, ...rest}) => {\n    const {currentUser} = useContext(AuthContext);\n    return (\n        <Route\n            {...rest}\n            render={routeProps =>\n                !!currentUser ? (\n                    <RouteComponent {...routeProps} />\n                ) : (\n                    <Redirect to={\"/login\"}/>\n                )\n            }\n        />\n    );\n};\n\n\nexport default PrivateRoute","import React, { useEffect, useState } from \"react\";\n//import firebase from \"./firebase\";\n//import \"firebase/firestore\";\nimport app from \"./firebase\";\n\nfunction MainPage() {\n    const [itemTitle, setItemTitle] = useState(\"\");\n    const [items, setItems] = useState([\n        { itemTitle: \"item1\" },\n        { itemTitle: \"item2\" },\n        { itemTitle: \"item3\" },\n    ]);\n\n    useEffect(() => {\n        // firebase.firestore().collection(\"users\")\n        // .add({\n        //   first: \"PCB\",\n        //   last: \"Lovelace\",\n        //   born: 1815,\n        // })\n        // .then(function (docRef) {\n        //   console.log(\"Document written with ID: \", docRef.id);\n        // })\n        // .catch(function (error) {\n        //   console.error(\"Error adding document: \", error);\n        // });\n\n        // firebase\n        //   .firestore()\n        //   .collection(\"todos\")\n        //   //.where(\"country\", \"==\", \"USA\")\n        //   .get()\n        //   .then((querySnapshot) => {\n        //     const todoItems = querySnapshot.docs.map((doc) => doc.data());\n        //     setItems(todoItems);\n        //     querySnapshot.forEach((doc) => {\n        //       console.log(`${doc.data().itemTitle}`);\n        //     });\n        //   });\n    }, []);\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n        //setItems(itemTitle)\n        let pcb = {\"itemTitle\":itemTitle};\n\n        setItems([...items, pcb]);\n        // firebase\n        //   .firestore()\n        //   .collection(\"todos\")\n        //   .add({\n        //     itemTitle,\n        //   })\n        //   .then(function (docRef) {\n        //     console.log(\"Document written with ID: \", docRef.id);\n        //   })\n        //   .catch(function (error) {\n        //     console.error(\"Error adding document: \", error);\n        //   });\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>TODO</h1>\n            <pre>{items.size}</pre>\n            <form onSubmit={onSubmit}>\n                <div>\n                    <label></label>\n                </div>\n                <input\n                    type=\"text\"\n                    value={itemTitle}\n                    onChange={(e) => setItemTitle(e.currentTarget.value)}\n                />\n                <button>Add</button>\n            </form>\n            {items &&\n            items.map((item, index) => <li key={index}>{item.itemTitle}</li>)}\n\n            <button onClick={() => app.auth().signOut()}>Sign out</button>\n        </div>\n    );\n}\n\nexport default MainPage;\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Login from \"./Login\";\nimport { AuthProvider } from \"./Auth\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport MainPage from \"./MainPage\";\n\nconst App = () => {\n  return (\n      <AuthProvider>\n        <Router>\n          <div>\n            <PrivateRoute exact path=\"/\" component={MainPage} />\n            <Route exact path=\"/login\" component={Login} />\n          </div>\n        </Router>\n      </AuthProvider>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}