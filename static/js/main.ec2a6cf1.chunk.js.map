{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","useState","itemTitle","setItemTitle","items","setItems","useEffect","className","size","onSubmit","e","preventDefault","pcb","type","value","onChange","currentTarget","map","item","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wQAaEA,IAASC,cAXY,CACrBC,OAAQ,0CACRC,WAAY,6BACZC,YAAa,oCACbC,UAAW,aACXC,cAAe,yBACfC,kBAAmB,eACnBC,MAAO,8CA6BMR,EAAf,E,MC4CeS,MA7Ef,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,OAEaF,mBAAS,CACjC,CAAEC,UAAW,SACb,CAAEA,UAAW,SACb,CAAEA,UAAW,WALF,mBAENE,EAFM,KAECC,EAFD,KAwDb,OAhDAC,qBAAU,cA0BP,IAuBD,yBAAKC,UAAU,OACb,oCACA,6BAAMH,EAAMI,MACZ,0BAAMC,SAxBO,SAACC,GAChBA,EAAEC,iBAEF,IAAIC,EAAM,CAAC,UAAYV,GAEvBG,EAAS,GAAD,mBAAKD,GAAL,CAAYQ,OAoBhB,6BACE,iCAEF,2BACEC,KAAK,OACLC,MAAOZ,EACPa,SAAU,SAACL,GAAD,OAAOP,EAAaO,EAAEM,cAAcF,UAEhD,wCAEDV,GACCA,EAAMa,KAAI,SAACC,EAAMC,GAAP,OAAiB,wBAAIC,IAAKD,GAAQD,EAAKhB,gBCjErCmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ec2a6cf1.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBlc-9cBQVLLXdLxYfVpgh8I3iFALoQ7E0\",\n  authDomain: \"todo-2ac34.firebaseapp.com\",\n  databaseURL: \"https://todo-2ac34.firebaseio.com\",\n  projectId: \"todo-2ac34\",\n  storageBucket: \"todo-2ac34.appspot.com\",\n  messagingSenderId: \"144767486267\",\n  appId: \"1:144767486267:web:53c6a77d36c83e42db4f1e\",\n};\n\n//if (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n\n  /*\n  firebase.firestore().collection(\"users\")\n    .add({\n      first: \"PCB\",\n      last: \"Lovelace\",\n      born: 1815,\n    })\n    .then(function (docRef) {\n      console.log(\"Document written with ID: \", docRef.id);\n    })\n    .catch(function (error) {\n      console.error(\"Error adding document: \", error);\n     });\n\n  db.collection(\"users\")\n    .get()\n    .then((querySnapshot) => {\n      querySnapshot.forEach((doc) => {\n        console.log(`${doc.data().first} ${doc.data().last}`);\n      });\n    }); */\n//}\n\nexport default firebase;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport firebase from \"./firebase\";\nimport \"firebase/firestore\";\n\nfunction App() {\n  const [itemTitle, setItemTitle] = useState(\"\");\n  const [items, setItems] = useState([\n    { itemTitle: \"item1\" },\n    { itemTitle: \"item2\" },\n    { itemTitle: \"item3\" },\n  ]);\n\n  useEffect(() => {\n    // firebase.firestore().collection(\"users\")\n    // .add({\n    //   first: \"PCB\",\n    //   last: \"Lovelace\",\n    //   born: 1815,\n    // })\n    // .then(function (docRef) {\n    //   console.log(\"Document written with ID: \", docRef.id);\n    // })\n    // .catch(function (error) {\n    //   console.error(\"Error adding document: \", error);\n    // });\n\n    // firebase\n    //   .firestore()\n    //   .collection(\"todos\")\n    //   //.where(\"country\", \"==\", \"USA\")\n    //   .get()\n    //   .then((querySnapshot) => {\n    //     const todoItems = querySnapshot.docs.map((doc) => doc.data());\n    //     setItems(todoItems);\n    //     querySnapshot.forEach((doc) => {\n    //       console.log(`${doc.data().itemTitle}`);\n    //     });\n    //   });\n  }, []);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    //setItems(itemTitle)\n    let pcb = {\"itemTitle\":itemTitle};\n\n    setItems([...items, pcb]);\n    // firebase\n    //   .firestore()\n    //   .collection(\"todos\")\n    //   .add({\n    //     itemTitle,\n    //   })\n    //   .then(function (docRef) {\n    //     console.log(\"Document written with ID: \", docRef.id);\n    //   })\n    //   .catch(function (error) {\n    //     console.error(\"Error adding document: \", error);\n    //   });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>TODO</h1>\n      <pre>{items.size}</pre>\n      <form onSubmit={onSubmit}>\n        <div>\n          <label></label>\n        </div>\n        <input\n          type=\"text\"\n          value={itemTitle}\n          onChange={(e) => setItemTitle(e.currentTarget.value)}\n        />\n        <button>Add</button>\n      </form>\n      {items &&\n        items.map((item, index) => <li key={index}>{item.itemTitle}</li>)}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}